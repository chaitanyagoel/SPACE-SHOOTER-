{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Data","state","data","performSearch","method","url","fetch","body","JSON","stringify","headers","then","response","status","json","errResData","error","Error","responseData","console","log","setState","getData","this","columns","title","dataIndex","key","render","text","length","i","push","name","rank","score","dataSource","React","Component","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"2NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iDC2DSC,G,mNAxEbC,MAAM,CACJC,KAAK,I,EAGPC,cAAc,YAmBI,WAlBQ,IAACC,EAAQC,EAAKH,GAAbE,EAmBP,MAnBeC,EAmBR,iDAlBhBC,MAAMD,EAAK,CAChBD,OAAQA,EACRG,KAAMC,KAAKC,UAAUP,GACrBQ,QAASR,EAAO,CAAE,eAAgB,oBAAuB,KACxDS,MAAK,SAAAC,GACN,OAAIA,EAASC,QAAU,IAEdD,EAASE,OAAOH,MAAK,SAAAI,GAC1B,IAAMC,EAAQ,IAAIC,MAAM,yBAExB,MADAD,EAAMd,KAAOa,EACPC,KAGHJ,EAASE,WAKuDH,MAAK,SAAAO,GAC5EC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACnB,KAAKgB,OAGxBI,I,mEAGAC,KAAKpB,kB,+BAKN,IAAMqB,EAAU,CACb,CACEC,MAAO,OACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAAAC,GAAI,OAAI,2BAAIA,KAEtB,CACEJ,MAAO,OACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAAAC,GAAI,OAAI,2BAAIA,KAEtB,CACEJ,MAAO,QACPC,UAAW,QACXC,IAAK,UAIHzB,EAAO,GACb,GAAGqB,KAAKtB,MAAMC,KAAK4B,OACjB,IAAK,IAAIC,EAAI,EAAGA,EAAGR,KAAKtB,MAAMC,KAAK4B,OAASC,IAC1C7B,EAAK8B,KAAK,CACRC,KAAMV,KAAKtB,MAAMC,KAAK6B,GAAGE,KACzBC,KAAMH,EAAI,EACVI,MAAOZ,KAAKtB,MAAMC,KAAK6B,GAAGI,QAKhC,OAAQ,kBAAC,IAAD,CAAOX,QAASA,EAASY,WAAYlC,Q,GArE9BmC,IAAMC,YCGzBC,IAASX,OAAO,kBAAC,EAAD,MAASY,SAASC,eAAe,SF4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLG,QAAQH,MAAMA,EAAMgC,c","file":"static/js/main.814d8e1b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport { Table, Tag, Space } from 'antd';\nimport 'antd/dist/antd.css';\n\nclass Data extends React.Component {\n  state={\n    data:[],\n    }\n  \n  performSearch=()=>{\n    const sendHttpRequest = (method, url, data) => {\n      return fetch(url, {\n        method: method,\n        body: JSON.stringify(data),\n        headers: data ? { 'Content-Type': 'application/json' } : {}\n      }).then(response => {\n        if (response.status >= 400) {\n          // !response.ok\n          return response.json().then(errResData => {\n            const error = new Error('Something went wrong!');\n            error.data = errResData;\n            throw error;\n          });\n        }\n        return response.json();\n      });\n    };\n    \n    const getData = () => {\n      sendHttpRequest('GET', 'https://garvitchittora.pythonanywhere.com/list').then(responseData => {\n        console.log(responseData);\n        this.setState({data:responseData});\n      });\n    };\n    getData();\n  }\n  componentWillMount(){\n    this.performSearch()\n  }\n  \n\n  render() {\n\t  const columns = [\n      {\n        title: 'Rank',\n        dataIndex: 'rank',\n        key: 'rank',\n        render: text => <a>{text}</a>,\n      },\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        render: text => <a>{text}</a>,\n      },\n      {\n        title: 'Score',\n        dataIndex: 'score',\n        key: 'score',\n      },\n      \n    ];\n    const data = [];\n    if(this.state.data.length){\n      for (let i = 0; i <this.state.data.length ; i++) {\n        data.push({\n          name: this.state.data[i].name,\n          rank: i + 1,\n          score: this.state.data[i].score,\n        });\n      }\n    }\n    \n    return (<Table columns={columns} dataSource={data} />)\n  }\n}\n\nexport default Data;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Data from './App.js';\n\n\nReactDOM.render(<Data/>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}